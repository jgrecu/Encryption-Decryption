type: edu
custom_name: stage4
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-data", "Welcome to hyperskill!"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-data", "Hello"
                    )
                    .setAttach("Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-data", "012345678",
                        "-mode", "enc"
                    )
                    .setAttach("123456789"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-data", "\\jqhtrj%yt%m~ujwxpnqq&",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-data", "Hi"
                    )
                    .setAttach("Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-data", "222233334444"
                    )
                    .setAttach("111122223333")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            return new CheckResult(reply.trim().equals(clue.trim()));
        }
    }
  learner_created: false
- name: src/encryptdecrypt/EncryptDecrypt.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Encrypt {
        //private final String str = "abcdefghijklmnopqrstuvwxyz";

        public String encryptText(String input) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) >= 'a' && input.charAt(i) <= 'z') {
                    char letter = (char) (122 - input.charAt(i) + 97);
                    sb.append(letter);
                } else {
                    sb.append(input.charAt(i));
                }
            }
            return sb.toString();
        }

        public String processText(String inputText, int key, String process) {
            switch (process) {
                case "enc":
                    return encryptText(inputText, key);
                case "dec":
                    return decryptText(inputText, key);
                default:
                    return null;
            }
        }
        public String encryptText(String input, int key) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < input.length(); i++) {
                char letter = input.charAt(i);
                char encLetter = (char) (letter + key);
                sb.append(encLetter);
            }
            return sb.toString();
        }

        public String decryptText(String input, int key) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < input.length(); i++) {
                char letter = input.charAt(i);
                char decLetter = (char) (letter - key);
                sb.append(decLetter);
            }
            return sb.toString();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/248/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 17 Sep 2021 09:54:23 UTC
record: 4
